version: '3.8'

services:
  # Redis Cache para sess√µes WhatsApp
  redis:
    image: redis:7-alpine
    container_name: whatsapp-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - whatsapp-network

  # Baileys Service (WhatsApp Web Protocol)
  baileys:
    build:
      context: ./baileys-service
      dockerfile: Dockerfile
    container_name: whatsapp-baileys
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
    volumes:
      - baileys_sessions:/app/sessions
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - whatsapp-network
    depends_on:
      redis:
        condition: service_healthy

  # Backend API (.NET 9)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: whatsapp-backend
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:5000
      - ConnectionStrings__RulesEngineDatabase=${DATABASE_URL}
      - Jwt__Key=${JWT_SECRET_KEY}
      - Jwt__Issuer=whatsapp-microservice
      - Jwt__Audience=whatsapp-frontend
      - Jwt__ExpiresInMinutes=1440
      - BaileysService__Url=http://baileys:3001
      - BaileysService__AutoStart=false
      - Redis__ConnectionString=redis:6379
      - Supabase__Url=${SUPABASE_URL}
      - Supabase__AnonKey=${SUPABASE_ANON_KEY}
      - WhatsApp__MetaAPI__WebhookVerifyToken=${WEBHOOK_VERIFY_TOKEN}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - whatsapp-network
    depends_on:
      redis:
        condition: service_healthy
      baileys:
        condition: service_healthy

  # Frontend React (opcional - para desenvolvimento)
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile
  #   container_name: whatsapp-frontend
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - VITE_API_URL=http://backend:5000/api/v1
  #     - VITE_SUPABASE_URL=${SUPABASE_URL}
  #     - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
  #   networks:
  #     - whatsapp-network
  #   depends_on:
  #     backend:
  #       condition: service_healthy

volumes:
  redis_data:
    driver: local
  baileys_sessions:
    driver: local

networks:
  whatsapp-network:
    driver: bridge
